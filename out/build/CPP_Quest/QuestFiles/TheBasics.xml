<TheBasics>
    <Lesson1>
        <LessonTitle>Programs</LessonTitle>
        <LessonPrompts>
            <Prompt>
          In this lesson, you will learn about compling source code into object files and then linking 
          object files to create an executable program. Enter OK:
        </Prompt>
            <Prompt>
          Programs start with source code which is what you write in C++. For each source code file, 
          the compiler generates on object file. Next a linker is used to link all of the object files 
          into an executable program. Executable programs are specific to the combination of hardware 
          and OS on which they were compiled. Enter compiler, executable program, linker, object files, 
          source code in the correct order (comma separated):
        </Prompt>
            <Prompt>
          The core language features of C++ include built in data types and control flow elements. While
          standard library (std) components consist of containers for datatypes, as well as input/output
          operations. C++ is statically typed meaning that the compliler needs to know the type of an
          entity when it is to be used in the program. Which set of features/components would you rely
          on to create a for loop?
        </Prompt>
        </LessonPrompts>
        <LessonAnswers>
            <Answer>OK</Answer>
            <Answer>source code, compiler, object files, linker, executable program</Answer>
            <Answer>core language features</Answer>
        </LessonAnswers>
        <LessonRewards>
          <Experience>0</Experience>
          <Items></Items>
          <special></special>
        </LessonRewards>
    </Lesson1>
    <Lesson2>
        <LessonTitle>Hello World!</LessonTitle>
        <LessonPrompts>
            <Prompt>
        In this lesson we are going to write our first C++ program to print "Hello World!" to the conosle. Enter OK:
            </Prompt>
            <Prompt>
        The first few lines of a C++ progam usually contain the code libraries the program needs to run properly. These are referred to as "include" directives and they look like this:

        #include &lt;NameOfLibrary&gt;

        Sometimes these inlcude statments will vary in how they are written but we are getting ahead of ourselves.
        Write the include statement for the input-output stream (iostream) library:
      </Prompt>
            <Prompt>
        Every C++ program uses a driver function named "main()" which represents the entry point for the program.
        The main function returns an integer so it preceeded by the keyword "int". Enter the proper main function now:
      </Prompt>
            <Prompt>
        The scope of the main function begins with a curly brace "{" which is usually placed on the following line.
        Begin the scope of the main function by entering an opening curly brace:
      </Prompt>
            <Prompt>
        Now you can use the iostream library we entered on the first line to print to the console. You can do this by calling the cout function from the std (standard, often pronounced "stood") library.
        You do this by typing "std::cout and then using the input operator "&lt;&lt;" followed by the output you would like to print: "Hello World!\"\n and remember to end the line with a semicolon (;)
      </Prompt>
            <Prompt>
        Finally, you need to close out the scope of the main function to tell the compiler that the function is complete. You do this by entering a closing curly brace:
      </Prompt>
        </LessonPrompts>
        <LessonAnswers>
            <Answer>OK</Answer>
            <Answer>#include &lt;iostream&gt;</Answer>
            <Answer>int main()</Answer>
            <Answer>{</Answer>
            <Answer>std::cout &lt;&lt; \"Hello World!\";</Answer>
            <Answer>}</Answer>
        </LessonAnswers>
        <LessonRewards>
          <Experience>2</Experience>
          <Items></Items>
          <special></special>
        </LessonRewards>
    </Lesson2>
    <Lesson3>
        <LessonTitle>Creating Functions</LessonTitle>
        <LessonPrompts>
            <Prompt>In this lesson, we are going to practice writing functions: (enter \"OK\")
      </Prompt>
            <Prompt>Functions must be declared before they are invoked (called). They can also be nested within each other and, as you learned in the previous lesson, the main() function initiates the program and calls other functions.
      Lets say we want to add a function to our previous program to count the letters in \"Hello World\", where would we place this function (enter the line number:
      1 #include &lt;iostream&gt;
      2
      3 int main() 
      4 {
      5
      6 std::cout &lt;&lt; "Hello World!";
      7
      8 }
      </Prompt>
            <Prompt>
        Function declarations consist of 3 parts: return type (function output), function name, and arguments (function input type and variable name pairs). The executable commands of a function occur within the function's scope which is identified by opening and closing curly braces: {}.
        For our counting function, we will return an integer type (keyword: int). We will cover data types in an upcoming lesson. For now, you just need to understand that an integer (int) represents a whole number between -2147483647 and 2147483647 depending on your operating system.
        Enter the key word for the function's return type below:
      </Prompt>
            <Prompt>
        Function names and function arguments (input) usually go together on the same line. The function name should start with a letter and should be concise yet descriptive. We will call our function \"countElements\". Function names are followed by a set of parentheses containing the type(s)
        followed by the name(s) of variables passed as arguments. In our case we will pass an array of characters containing our greeting. Enter the function name followed by a set of parentheses containing the char type called array[]:
      </Prompt>
            <Prompt>
        Now let's start the scope of our new function with an opening curly brace:
      </Prompt>
            <Prompt>
        The type that we passed as an argument to this function is a pointer to the first element inside an array of characters. C++ is BASED ON C, which does not natively provide complex data types such as strings. Instead, words, sentences and other sets of printable characters are represented as arrays
        of characters (char[]). Arrays are continguous sections of your computer's memory. Anyway, we are getting way ahead of ourselves. Essentially, we need to iterate (move sequentially) through all of the elements of our character array ("Hello World") and count the number of printable
        characters that it contains. We will declare and initialize the variable \"int size = 0;\" to help us keep count and we will use a \"for loop\", to \"iterate\" through the array. We will discuss for loops and other control flow structures in a future lesson. For now, retype the following into the console:
        int size = 0;
        while (x[size] != '\0') {
            size++;
        }
      </Prompt>
          <Prompt>
            Okay the last thing our function needs to do is \"return\" the count to the calling function. But in order to do this, we have to increment the size variable since C++ arrays are zero indexed meaning the initial element starts at index 0. We then return the count by typing \"return size + 1;\":
          </Prompt>
            <Prompt>
        Great, now we can close the scope of our function using a closing curly brace and don't forget the semicolon:
      </Prompt>
            <Prompt>
       Okay this is what our program looks like so far:
       
        1  #include &lt;iostream&gt;
        2
        3  int countElements(char array[])
        4  {
        5    int size = 0;
        6    while (array[size] != '\n') {
             size++;
        7  }
        8  return size++;
        9  };
    
      Okay, now we can get to the point of this whole lesson! We are going to call our countElements function from our main() function and \"pass\" the character array as input. We will also save the return value by declaring an integer. Again, we will cover variable declaration in the next lesson. 
      For now, here is another \"magical incantation\" I would like you to re-type:
      int main()
      {
        int count = countElements("Hello World!");
      </Prompt>
          <Prompt>
            Excellent! You just declared and called your first function! But now we need to print the output to the console so that the user knows how many printable characters are found in the char array \"Hello World\". For this you can rely on the knowledge of std::cout from lesson 1.
            In your response, make sure to tell the user what the number means by first passing the phrase \"Number of printable characters:"
          </Prompt>
            <Prompt>
              Don't forget to close out the main function with a closing curly brace and a semi-colon:
            </Prompt>
        </LessonPrompts>
        <LessonAnswers>
            <Answer>OK</Answer>
            <Answer>2</Answer>
            <Answer>int</Answer>
            <Answer>CountElements(char array[])</Answer>
            <Answer>{</Answer>
            <Answer>int size = 0;
              while (array[size] != '\n') {
                size++;
              }</Answer>
          <Answer>return size++;</Answer>
          <Answer>};</Answer>
            <Answer>int count = countElements("Hello World!");</Answer>
            <Answer>std::cout &lt;&lt; "Number of printable characters:" &lt;&lt; count;</Answer>
          <Answer>};</Answer>
        </LessonAnswers>
        <LessonRewards>
          <Experience>10</Experience>
          <Items></Items>
          <special></special>
        </LessonRewards>
    </Lesson3>
    <Lesson4>
        <LessonTitle>Programs</LessonTitle>
        <LessonPrompts>
            <Prompt>
        In this lesson, you will learn about compling source code into object files and then linking object files to create an executable program. Enter OK:
      </Prompt>
        </LessonPrompts>
        <LessonAnswers>
            <Answer>OK</Answer>
        </LessonAnswers>
        <LessonRewards>
          <Experience>0</Experience>
          <Items></Items>
          <special></special>
        </LessonRewards>
    </Lesson4>
</TheBasics>
